HttpSercletRequest既有getAttribute（对象）也有getParameter（字符串）,
                   但只有setAttribute()方法，没有setParameter，因为不用为对象赋值，getParameter是直接取string name，不是对象不用设置
				 例：session.setAttribute（"sessionName",值）
                要取网页的请求的值，
				session（会话，时间概念） 浏览器关闭跟session没有关系。
Session生命周期：
     	session存储在服务器端，一般放置在服务器中，session在用户访问第一次访问服务器是创建，需要注意只有访问JSP，servlet等程序时才创建Session，只访问html,image时等静态资源不会创建，可调用request.getSession（true）强制生成。
session什么时候失效：
        服务器会把长时间没有活动的session从服务器内清除，Tomcat的默认失效时间为20分钟。调用session的invalidatae方法。
		第一：session调用了session.invalidate()方法.
        第二：前后两次请求超出了session指定的生命周期时间.
		Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session。用户每访问服务器一次，无论是否读写Session，服务器都认为该用户的Session"活跃（active）"了一次。
Session对浏览器的要求：
     虽然Session保存在服务器，对客户端是透明的，他的正常运行仍然需要浏览器的支持。这是因为Session需要使用Cookie作为识别标志。
HTTP协议是无状态的，session不能依据HTTP连接来判断是否为同一客户，因此服务器想客户端浏览器发送一个名为JSSESSIONID(jssessionId)的cookie（小点心，浏览器缓存）
他的值就是Session的id(也就是HTTPSession.getId()的返回值)。Session依据该Cookie来识别是否为同一用户。

如果客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？
   java web提供临一中解决方案：URL的重写
    URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。
	这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。HttpServletResponse类提供了encodeURL(String url)实现URL地址重写，
	该方法会自动判断客户端是否支持Cookie。如果客户端支持Cookie，会将URL原封不动地输出来。如果客户端不支持Cookie，则会将用户Session的id重写到URL中。

	request.getParameterMap()方法则不同，不需要参数，返回结果为Map<String，string[]>。其实，request.getParameter（）方法也是通过
	前台表单中的name值进行获取，获取到后又进行了一次封装。之所以返回的map中的value字符串类型的数组，是为了解决表单中有多个name值一样的项。
	这个返回值有个特别之处――只能读，不像普通的Map类型数据一样可以修改。
	如果有需要，可以复制到一个新建的map对象，然后进行修改。
////////////////////////////////////////////////////////////////
getSession()相当于getSession(true);
   参数为true时，若存在会话，则返回该会话，否则新建一个会话；
   参数为false时，如存在会话，则返回该会话，否则返回NULL；
   
 filter的学习笔记:config配置，chain链条
   webclient ――》Tomcat                    ――》filter――》JSP
                    ――》httpservletRequest
					――》httpservletResponse
  
   javweb中，request和response是在接受每一次客户端的请求后，由web服务器产生的。
   filter可以在request到达servlet之前和response即离开servlet时分别对他们进行处理。
   servlet（在服务器上运行的小程序）是用java编写的服务器端程序，主要功能是用于交互式的浏览和修改数据，"动态"生成web内容。
   servlet=service+applet―
   servlet与jsp的区别：servlet首先被sun公司开发出来，两者的没什么本质区别，只是在JSP中编写静态的HTML更加方便，不必再用println语句输出每一行。
   <filter-mapping>的URL配置：*.jsp （对所有页面），/*（对所有对象）
   
  服务器生成的三个对象：request，response，FilterChain chain
  
  继承javax.servlet.Filter具有以下三种方法：
  init（），destroy（）
  doFilter（）：用于对request，response进行处理，并能通过chain.doFilter（）交给下一个过滤器。
  所以FilterChain接口，实例化代表当前Filter链对象，容器将其实例作为参数传入过滤器对象的doFilter（）方法中。
  主要作用是调用过滤器链中的下一个过滤器。 
》》  这里需要注意的地方是，当response调用重定向sendRedirect（）重新定向时，一定要使用chain参数调用doFilter链，再次执行原来的doFilter，获取传递response对象。

HttpServletRequest.getSession().getId()是服务器端的概念
HttpServletRequest.getRequestedSessionId()是客户端就是浏览器的概念。
获取到的值它是随着浏览器和服务器端的Cookie进行交流，对于用户和开发人员是透明的

validate批准 使生效，invalidate使无效。

<% %> 相当于你写在Servlet 的doget() or dopost()里， 可以用request response等对象
<%! %> 相当于你写在Servlet里的方法， 没有request response对象

pageEncoding是jsp文件本身的编码

contentType的charset是指服务器发送给客户端时的内容编码

JSP要经过两次的“编码”，第一阶段会用pageEncoding，第二阶段会用utf-8至utf-8，第三阶段就是由Tomcat出来的网页， 用的是contentType。

javaScript的encodeURL（）函数

因为浏览器会用一些特殊的字符作为特定的意义，所以在要传输的内容上如果有这些特殊的字符的话，就需要对其进行转义才能正确传输，如以下字符为发送时候的关键字，
即特殊字符――;/?:@&=+$,#
此时我们完成了URL传入中文参数出现乱码的问题，总结步骤大致分为一下阶段：
1、在javascript中利用encodeURI()两次嵌套对URL中的中文参数进行编码
2、在后台获取到进过前端encodeURI()编码后的字符串，使用decode(String str,String ecn)方法进行解码


表单GET

	我们知道通过URL方式提交数据是很容易产生乱码问题的，所以我们更加倾向于通过表单形式。
	当用户点击submit提交表单时，浏览器会更加设定的编码来编码数据传递给服务器。
	通过GET方式提交的数据都是拼接在URL后面（可以当做query String？？）来提交的，所以tomcat服务器在进行解码过程中URIEncoding就起到作用了。
	tomcat服务器会根据设置的URIEncoding来进行解码，如果没有设置则会使用默认的ISO-8859-1来解码。
	假如我们在页面将编码设置为UTF-8，而URIEncoding设置的不是或者没有设置，那么服务器进行解码时就会产生乱码。
	这个时候我们一般可以通过new String(request.getParameter("name").getBytes("iso-8859-1"),"utf-8") 的形式来获取正确数据。
	GET 提交，请求的数据用&连接（就是把数据放置在http协议头<request-line>中）
	POST提交 放置在HTTP包的包体<request-body>中。
	
表单POST
	
	对于POST方式，它采用的编码也是由页面来决定的即contentType。
	当我通过点击页面的submit按钮来提交表单时，浏览器首先会根据ontentType的charset编码格式来对POST表单的参数进行编码然后提交给服务器，
	在服务器端同样也是用contentType中设置的字符集来进行解码（这里与get方式就不同了），这就是通过POST表单提交的参数一般而言都不会出现乱码问题。当然这个字符集编码我们是可以自己设定的：request.setCharacterEncoding(charset) 。
	
	removeAttribute() 方法删除指定的属性
	onblur事件
	<article>定义自包含内容。
	如果你不希望选择任意的后代元素，而是希望缩小范围，只选择某个元素，请使用元素选择器（Child selector）  '>'
	$().attr() 返回元素的属性值。attr()方法还可以设置属性，$().attr（attribute="value"）
	
	 GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。
	 浏览器的Url长度有限制。
////////////////////SOCKET//////////////////////



	一次C/S交互要调用11个包
	服务器调用socket（），bind()，listen()完成初始化后，调用accept阻塞等待，处于监听端口的状态，客户端调用socket（）初始化后，
	调用connect()发出SYN端并阻塞等待服务器应答，服务器应答一个SYN-ACK段，客户端收到后从connect（）返回，同时应答一个ACK段，
	服务器收到后从accept（）返回。http://blog.csdn.net/heyutao007/article/details/6588302
	
	使用socket通行，不同的进程区分网络通信的连接依靠三个参数：通信所用的协议，地址IP，端口号。
	TCP/IP IP协议是端到端的协议，他只是负责把数据发送到端，运输层TCP,UDP加上端口号，目的是区分不同的应用。
	accept返回的句柄建立的连接包括四部分：源IP，源端口号，目的IP,目的端口号。
	>>>采用TCP通信时，客户端不需要bind（）他自己的IP和端口号，而服务器必须要bind（）自己本机的IP和端口号。
	   因为服务器是时时监听有没有客户端连接，如果服务器不绑定IP和端口的话，客户端无法连接，
	
   握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据，ACK报文是用来应答的，SYN报文是用来同步的。
   
   利用三元组（IP，协议，端口）就可以标识网络的进程，网络中的通行就可以利用这个标志与其他的进程进行交互
   网络中的进程是通过socket来通信的，socket是"open-write/read-close"模式的一种实现，那么socket就是提供了这些操作对应的函数接口。  
   而TCP/IP协议的应用程序通常采用应用编程接口:UNIX BSD的套接字（socket）
   
   (socket是一条马路，终点和起点规定好（IP和端口），InputStream/OutputStream就是这条马路上的拉数据的卡车，可以通过socket对象get获取到货物)
   int socket（int domin）
   推荐使用recvmsg()/sendmsg()函数，这两个函数是最通用的I/O函数，实际上可以把上面的其它函数都替换成这两个函数
   
   线程是独立于其他的线程去执行一些特定的任务，一般这个任务是固定的，或者是同类型的。
   多个线程之间共享的只是这个线程结束的的条件。
   
   （run是线程运行的过程，start只是给线程运行一个口令罢了，就好比运动员跑步，须等裁判吹口哨才能跑起来
	如果说没有用start方法，那么run方法只能放在Thread的构造方法中去完成了，这样Thread只是一个普通的java对象，
	此时在{{{Thread构造方法中打印当前线程名称仍然是Thread-main,}}
	此时的new Thread()就是一个简单的java对象，而不能起到线程的作用）
	
   try_catch_finaly
   
   一些重要的方法：
   //////类ServerSocket (此类实现服务器套接字。服务器套接字等待请求通过网络传入。它基于该请求执行某些操作，然后可能向请求者返回结果)
   ServerSocket(int port, int backlog)
   利用指定的 backlog 创建服务器套接字并将其绑定到指定的本地端口号。
   
   bind(SocketAddress endpoint, int backlog)
   将 ServerSocket 绑定到特定地址（IP 地址和端口号）。
   
   accept()
  侦听并接收此套接字的连接
  getInetAddress()
  返回此服务器套接字的本地地址。
  close()
  关闭此套接字。
  
  //////类Socket(此类实现客户端套接字（也可以就叫“套接字”）。套接字是两台机器间通信的端点。)
  Socket（intAddress,int port）创建一个套接字并将其连接到指定的IP地址的指定端口号。
  getInetAddress() 返回套接字的连接地址
  connect（）将此套接字连接到服务器<但Socket类中的connect方法是使用SocketAddress类来向connect方法传递服务器的IP和端口>InetAddress实现类
  
  包装类DataOutputStream、DataInputStream为我们提供了多种对文件的写入和读取方法，
   如writeBoolean(),writeUTF()，writeChar，writeByte()，writeDouble()等和对应的read方法，
   这些方法极大的方便了我们的写入和读取操作
  
  Integer.parseInt()就是把整数的字符串，转化为整数 ,一般用在 输入对话框,因为输入对话框只认为输入为string
  
  ///java的InputStream和OutputStream对象的理解  参考：http://blog.163.com/magicc_love/blog/static/1858536622012094526298/
 
 注意：
  InPutStream输入流只能调用一次，要想重复调用，要在第一次调用时赋值给对象或变量。
  inputstream.readUTF（）要想读一次，需要outputstream.writeUTF()写一次。只要相互通信了，来了消息，就会被一次取走。
  当我们在编写客户端代码时，需要手动调用socket对象的shutdownOutput()方法。来通知服务端数据发送完毕。
  accept，read主要两个阻塞，是被动的等待请求，write是主动的发送请求。
  如果socket不关闭的话，read之类的阻塞函数就会一直等待它发送数据，流不能回读！！！
  read的文档说明大致是：如果因已到达流末尾而没有可用的字节，则返回值 -1。在输入数据可用、检测到流的末尾或者抛出异常前，此方法一直阻塞。 
  
  
  在java中stream代表一种数据流（源），java.io的底层数据元。
  我们可以在这两个的基础上，从实际出发，来重新封装出不同性能机制的输入输出流了，
  如基于字节流的stream：
  DataOuputStream-DataInputStream 数据输入流（InputStream是输入字节流的所有超类）
  FileOutputStream-----FileInputStream:
  基于字符流的stream（典型的以write和reader来标识的）：
FileWriter---FileReader:
StringWriter---StringReader:
flush()刷空输出流，并输出所有被缓存的字节
由于某些流支持缓存功能，该方法将把缓存中所有内容强制输出到流中。

字节流：处理字节的输入和输出。包括读写二进制数据等方面的内容。
字符流：处理字符的输入和输出。他采用的是Unicode编码，可以实现国际化。使用字符流的另外一个好处就是：字符流比字节流更有效率。

-------http://blog.csdn.net/whuslei/article/details/6667471--------
建立TCP需要三次握手（首先Client端发送连接请求报文，Server段接受连接后回复ACK报文，并为这次连接分配资源。
Client端接收到ACK报文后也向Server段发生ACK报文，并分配资源，这样TCP连接就建立了。）
而断开连接需要四次握手，中断连接端可以是Client端，也可以是Server端。

【问题1】为什么连接的时候是三次握手，关闭的时候却是四次握手？
答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。
但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，
"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。

【问题2】为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？
答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假如网络是不可靠的，
有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。

InputStreamReader:将字节流使用charset解码为字符流
BufferReader:从字符输入流读取文本，缓冲字符，以提供字符，数组和行的搞笑读取

SystemTray类  代表桌面的系统托盘
PopupMenu类   一个实现菜单的类，可以在组件中的指定位置动态弹出菜单。
MenuItem类    菜单中的所有项目必须属于类别MenuItem或其子类之一
RandomAccessFile类 创建随机访问文件流
RandomAccessFile(String name,String mode),创建随机访问文件流，以从中指定名称的文件读取，并可选择写入文件。
RandomAccessFile(File file,String mode) mode 访问模式

InetSocketAddress是SocketAddress的实现子类。
此类实现 IP 套接字地址（IP 地址 + 端口号），不依赖任何协议。
在使用Socket来连接服务器时最简单的方式就是直接使用IP和端口，但Socket类中的connect方法并未提供这种方式，而是使用SocketAddress类来向connect方法传递服务器的IP和端口。
SocketAddress只是个抽象类，它除了有一个默认的构造方法外，其它的方法都是abstract的，因此，我们必须使用SocketAddress的子类来建立SocketAddress对象，也就是唯一的子类InetSocketAddress



数据库外键的作用，以及主键的作用标的外键是另一张表的主键，外键可以重复，可以是空值

////////建立socket时常用类的方法笔记////////

		boolean -- endsWith() boolean 测试是否以指定的路径或字符串结束
		string -- URLDecodeer.decode使用特定的编码方案解码 application/x-www-form-urlencoded字符串。
		int -- getPort() 返回此套接字端口(客户端的随机分配端口)
		TextField对象是允许编辑单行文本的文本组件。
		TextArea对象是显示文本的多行区域。 它可以设置为允许编辑或只读
		System.exit() 停止运行当前虚拟器

>>>>>>>>Java Socket编程中对于run的使用方法介绍<<<<<<<<
	run方法所做的事情，就是单线程版本main所做的事情，只执行一次。
	之前理解的无线循环，是错误的，只是里面的while方法条件为TRUE，又因为socket通信的read请求阻塞的原因。


提示：　如果你不想使用本地缓存可以用Ctrl+F5 强制刷新页面


jstl标签库

EL表达式${sessionScope.user.sex}
等价于――――User user =（User）session.getAttribute("user")
String sex = user.getSex();
  
  可以考虑:html标签的iframe标签和location.reload的配合???
  
  
  http://blog.csdn.net/qq_35447305/article/details/53224171  绑定邮箱，实现密码找回。